(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{732:function(t,n,s){"use strict";s.r(n);var a=s(27),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mac-指令-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mac-指令-tree"}},[t._v("#")]),t._v(" mac 指令 tree")]),t._v(" "),s("h2",{attrs:{id:"生成目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成目录结构"}},[t._v("#")]),t._v(" 生成目录结构")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mac 下使用 brew 包管理工具安装 tree")]),t._v("\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" tree\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看帮助信息")]),t._v("\ntree --help\n")])])]),s("p",[t._v("常用指令")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示项目的层级，n表示层级数")]),t._v("\ntree -L n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只显示文件夹")]),t._v("\ntree -d\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 过滤 node_modules 文件夹")]),t._v("\ntree -I “node_modules”\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用|同时排除掉多个文件夹")]),t._v("\ntree -I "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node_modules|cache|test_*"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把一个目录的结构树导出到文件 Readme.md")]),t._v("\ntree -L "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Readme.md\n")])])]),s("p",[t._v("指令说明")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("usage: tree "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-acdfghilnpqrstuvxACDFJQNSUX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-H baseHREF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-T title "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-L level "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-P pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-I pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-o filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--inodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--noreport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--nolinks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--dirsfirst"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--charset charset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--filelimit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#] [--si] [--timefmt[=]<f>]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--sort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--matchdirs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--ignore-case"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--fromfile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("directory list"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  ------- Listing options -------\n  -a            All files are listed.\n  -d            List directories only.\n  -l            Follow symbolic links like directories.\n  -f            Print the full path prefix "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each file.\n  -x            Stay on current filesystem only.\n  -L level      Descend only level directories deep.\n  -R            Rerun tree when max "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dir")]),t._v(" level reached.\n  -P pattern    List only those files that match the pattern given.\n  -I pattern    Do not list files that match the given pattern.\n  --ignore-case Ignore "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" when pattern matching.\n  --matchdirs   Include directory names "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" -P pattern matching.\n  --noreport    Turn off file/directory count at end of tree listing.\n  --charset X   Use charset X "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" terminal/HTML and indentation line output.\n  --filelimit "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Do not descend dirs with more than # files in them.")]),t._v("\n  --timefmt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Print and "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" according to the "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".\n  -o filename   Output to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" instead of stdout.\n  ------- File options -------\n  -q            Print non-printable characters as "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'?'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n  -N            Print non-printable characters as is.\n  -Q            Quote filenames with double quotes.\n  -p            Print the protections "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each file.\n  -u            Displays "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" owner or "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("UID")]),t._v(" number.\n  -g            Displays "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" group owner or GID number.\n  -s            Print the size "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bytes of each file.\n  -h            Print the size "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" human readable way.\n  --si          Like -h, but use "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" SI "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("units")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("powers of "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n  -D            Print the "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" of last modification or "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" status change.\n  -F            Appends "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'='")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'|'")]),t._v(" or "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>'")]),t._v(" as per "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -F.\n  --inodes      Print inode number of each file.\n  --device      Print device ID number to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" each "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" belongs.\n  ------- Sorting options -------\n  -v            Sort files alphanumerically by version.\n  -t            Sort files by last modification time.\n  -c            Sort files by last status change time.\n  -U            Leave files unsorted.\n  -r            Reverse the order of the sort.\n  --dirsfirst   List directories before files "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-U disables"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n  --sort X      Select sort: name,version,size,mtime,ctime.\n  ------- Graphics options -------\n  -i            Don't print indentation lines.\n  -A            Print ANSI lines graphic indentation lines.\n  -S            Print with CP437 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" graphics indentation lines.\n  -n            Turn colorization off always "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-C overrides"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n  -C            Turn colorization on always.\n  ------- XML/HTML/JSON options -------\n  -X            Prints out an XML representation of the tree.\n  -J            Prints out an JSON representation of the tree.\n  -H baseHREF   Prints out HTML "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" with baseHREF as "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" directory.\n  -T string     Replace the default HTML title and H1 header with string.\n  --nolinks     Turn off hyperlinks "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" HTML output.\n  ------- Input options -------\n  --fromfile    Reads paths from files "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("."),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("stdin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  ------- Miscellaneous options -------\n  --version     Print version and exit.\n  --help        Print usage and this "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" message and exit.\n  --            Options processing terminator.\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);