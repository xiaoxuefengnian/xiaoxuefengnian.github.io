(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{752:function(e,t,r){"use strict";r.r(t);var o=r(27),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"闭包-closure"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包-closure"}},[e._v("#")]),e._v(" 闭包（closure）")]),e._v(" "),r("h2",{attrs:{id:"什么是闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[e._v("#")]),e._v(" 什么是闭包")]),e._v(" "),r("p",[r("strong",[e._v("闭包的概念")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN 中对闭包的定义"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[e._v("A "),r("strong",[e._v("closure")]),e._v(" is the combination of a function bundled together (enclosed) with references to its surrounding state (the "),r("strong",[e._v("lexical environment")]),e._v("). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.")]),e._v(" "),r("p",[e._v("一个函数和对其周围状态（"),r("strong",[e._v("lexical environment，词法环境")]),e._v("）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是"),r("strong",[e._v("闭包")]),e._v("（"),r("strong",[e._v("closure")]),e._v("）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。")]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created.")]),e._v(" "),r("p",[e._v("闭包是由函数以及声明该函数的词法环境组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。")])]),e._v(" "),r("p",[e._v("JavaScript 高级程序设计（第 3 版）第 178 页")]),e._v(" "),r("blockquote",[r("p",[e._v("闭包是指有权访问另一个函数作用域中的变量的函数。")])]),e._v(" "),r("p",[e._v("你不知道的 JavaScript（上卷）第 44 页")]),e._v(" "),r("blockquote",[r("p",[e._v("当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://kb.cnblogs.com/page/111780/",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是闭包(Closure)？"),r("OutboundLink")],1),e._v("一文中")]),e._v(" "),r("blockquote",[r("p",[e._v("闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/1022910821149312/1023021250770016#0",target:"_blank",rel:"noopener noreferrer"}},[e._v("廖雪峰的官方网站-闭包"),r("OutboundLink")],1),e._v("一文中")]),e._v(" "),r("blockquote",[r("p",[e._v("闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/22486908",target:"_blank",rel:"noopener noreferrer"}},[e._v("「每日一题」JS 中的闭包是什么？"),r("OutboundLink")],1),e._v("一文中")]),e._v(" "),r("blockquote",[r("p",[e._v("「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包。")])]),e._v(" "),r("p",[r("strong",[e._v("闭包是什么")])]),e._v(" "),r("p",[e._v("看了上面对闭包的不同定义，无外乎两种，一种函数或是一种函数和环境的组合。")]),e._v(" "),r("p",[r("strong",[e._v("想了解闭包，要先了解作用域（scope）")])]),e._v(" "),r("p",[e._v("执行环境（execution context）、变量对象（variable object）和作用域链（scope chain）")]),e._v(" "),r("h2",{attrs:{id:"闭包的作用是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包的作用是什么"}},[e._v("#")]),e._v(" 闭包的作用是什么")]),e._v(" "),r("p",[e._v("闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。")])])}),[],!1,null,null,null);t.default=n.exports}}]);